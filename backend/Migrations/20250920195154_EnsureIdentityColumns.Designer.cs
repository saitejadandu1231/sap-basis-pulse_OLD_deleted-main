// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SapBasisPulse.Api.Data;

#nullable disable

namespace SapBasisPulse.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250920195154_EnsureIdentityColumns")]
    partial class EnsureIdentityColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SapBasisPulse.Api.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.ConsultantAvailabilitySlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BookedByCustomerChoiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsultantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SlotEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("SlotStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BookedByCustomerChoiceId")
                        .IsUnique();

                    b.HasIndex("ConsultantId");

                    b.ToTable("ConsultantAvailabilitySlots");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.CustomerChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConsultantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ScheduledTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SupportCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupportSubOptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupportTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("SupportCategoryId");

                    b.HasIndex("SupportSubOptionId");

                    b.HasIndex("SupportTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerChoices");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.LoginActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LoginStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SsoProviderUsed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginActivities");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConsultantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerChoiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SrIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SupportCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupportSubOptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupportTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("SupportTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TimeSlotId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CustomerChoiceId");

                    b.HasIndex("SupportCategoryId");

                    b.HasIndex("SupportSubOptionId");

                    b.HasIndex("SupportTypeId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.SupportCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SupportTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SupportTypeId");

                    b.ToTable("SupportCategories");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.SupportSubOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SupportTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SupportTypeId");

                    b.ToTable("SupportSubOptions");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.SupportType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SupportTypes");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.TicketRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CommunicationProfessionalism")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("RatingForRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ResolutionQuality")
                        .HasColumnType("integer");

                    b.Property<int?>("ResponseTime")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("RatedByUserId");

                    b.HasIndex("RatedUserId");

                    b.ToTable("TicketRatings");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("SsoProvider")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.ConsultantAvailabilitySlot", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.CustomerChoice", "BookedByCustomerChoice")
                        .WithOne("Slot")
                        .HasForeignKey("SapBasisPulse.Api.Entities.ConsultantAvailabilitySlot", "BookedByCustomerChoiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SapBasisPulse.Api.Entities.User", "Consultant")
                        .WithMany("ConsultantSlots")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookedByCustomerChoice");

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.CustomerChoice", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.User", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SapBasisPulse.Api.Entities.SupportCategory", "SupportCategory")
                        .WithMany()
                        .HasForeignKey("SupportCategoryId");

                    b.HasOne("SapBasisPulse.Api.Entities.SupportSubOption", "SupportSubOption")
                        .WithMany()
                        .HasForeignKey("SupportSubOptionId");

                    b.HasOne("SapBasisPulse.Api.Entities.SupportType", "SupportType")
                        .WithMany()
                        .HasForeignKey("SupportTypeId");

                    b.HasOne("SapBasisPulse.Api.Entities.User", "User")
                        .WithMany("CustomerChoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("SupportCategory");

                    b.Navigation("SupportSubOption");

                    b.Navigation("SupportType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.LoginActivity", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.Order", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.User", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SapBasisPulse.Api.Entities.User", "CreatedByUser")
                        .WithMany("Orders")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.CustomerChoice", "CustomerChoice")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerChoiceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.SupportCategory", "SupportCategory")
                        .WithMany()
                        .HasForeignKey("SupportCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.SupportSubOption", "SupportSubOption")
                        .WithMany()
                        .HasForeignKey("SupportSubOptionId");

                    b.HasOne("SapBasisPulse.Api.Entities.SupportType", "SupportType")
                        .WithMany()
                        .HasForeignKey("SupportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.ConsultantAvailabilitySlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Consultant");

                    b.Navigation("CreatedByUser");

                    b.Navigation("CustomerChoice");

                    b.Navigation("SupportCategory");

                    b.Navigation("SupportSubOption");

                    b.Navigation("SupportType");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.RefreshToken", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.SupportCategory", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.SupportType", "SupportType")
                        .WithMany("Categories")
                        .HasForeignKey("SupportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportType");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.SupportSubOption", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.SupportType", "SupportType")
                        .WithMany("SubOptions")
                        .HasForeignKey("SupportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportType");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.TicketRating", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.Order", "Order")
                        .WithMany("TicketRatings")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.User", "RatedByUser")
                        .WithMany()
                        .HasForeignKey("RatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.User", "RatedUser")
                        .WithMany()
                        .HasForeignKey("RatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("RatedByUser");

                    b.Navigation("RatedUser");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.CustomerChoice", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Slot")
                        .IsRequired();
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.Order", b =>
                {
                    b.Navigation("TicketRatings");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.SupportType", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("SubOptions");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.User", b =>
                {
                    b.Navigation("ConsultantSlots");

                    b.Navigation("CustomerChoices");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
