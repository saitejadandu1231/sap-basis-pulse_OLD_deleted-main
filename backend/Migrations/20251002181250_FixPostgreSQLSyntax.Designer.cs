// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SapBasisPulse.Api.Data;

#nullable disable

namespace SapBasisPulse.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251002181250_FixPostgreSQLSyntax")]
    partial class FixPostgreSQLSyntax
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SapBasisPulse.Api.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.ConsultantAvailabilitySlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BookedByCustomerChoiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsultantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("SlotEndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("SlotStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BookedByCustomerChoiceId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("ConsultantId", "SlotStartTime");

                    b.ToTable("ConsultantAvailabilitySlots");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.ConsultantSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsultantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("SupportCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupportSubOptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupportTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("SupportCategoryId");

                    b.HasIndex("SupportSubOptionId");

                    b.HasIndex("SupportTypeId");

                    b.HasIndex("ConsultantId", "SupportTypeId", "SupportCategoryId", "SupportSubOptionId")
                        .IsUnique()
                        .HasFilter("[SupportCategoryId] IS NOT NULL OR [SupportSubOptionId] IS NOT NULL");

                    b.ToTable("ConsultantSkill", (string)null);
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConsultantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastMessageAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("OrderId");

                    b.HasIndex("CustomerId", "ConsultantId");

                    b.ToTable("Conversations");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.CustomerChoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConsultantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ScheduledTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("SupportCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupportSubOptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupportTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("SupportCategoryId");

                    b.HasIndex("SupportSubOptionId");

                    b.HasIndex("SupportTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerChoices");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.LoginActivity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("DeviceInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LoginStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SsoProviderUsed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LoginActivities");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("EditedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("text");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("SenderId");

                    b.HasIndex("SentAt");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.MessageAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UploadedByUserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UploadedByUserId");

                    b.ToTable("MessageAttachments");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConsultantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CustomerChoiceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PaymentCompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RazorpayOrderId")
                        .HasColumnType("text");

                    b.Property<string>("RazorpayPaymentId")
                        .HasColumnType("text");

                    b.Property<string>("SrIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("StatusString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SupportCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SupportSubOptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupportTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("SupportTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TimeSlotId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("ConsultantId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("CustomerChoiceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SupportCategoryId");

                    b.HasIndex("SupportSubOptionId");

                    b.HasIndex("SupportTypeId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.OrderTimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TimeSlotId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TimeSlotId");

                    b.HasIndex("OrderId", "TimeSlotId")
                        .IsUnique();

                    b.ToTable("OrderTimeSlots");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.SSOConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AppleEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("GoogleEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("SupabaseEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SSOConfigurations");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.ServiceRequestIdentifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Task")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("ServiceRequestIdentifiers", (string)null);
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.StatusChangeLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ChangedByUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("FromStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("ToStatusId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChangedByUserId");

                    b.HasIndex("FromStatusId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ToStatusId");

                    b.ToTable("StatusChangeLogs");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.StatusMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ColorCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("IconCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("StatusCode")
                        .IsUnique();

                    b.ToTable("StatusMaster");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.SupportCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SupportTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SupportTypeId");

                    b.ToTable("SupportCategories");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.SupportSubOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("RequiresSrIdentifier")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SupportTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SupportTypeId");

                    b.ToTable("SupportSubOptions");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.SupportType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SupportTypes");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.TicketRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comments")
                        .HasColumnType("text");

                    b.Property<int?>("CommunicationProfessionalism")
                        .HasColumnType("integer");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RatedByUserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RatedUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("RatingForRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ResolutionQuality")
                        .HasColumnType("integer");

                    b.Property<int?>("ResponseTime")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("RatedByUserId");

                    b.HasIndex("RatedUserId");

                    b.ToTable("TicketRatings");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("HourlyRate")
                        .HasColumnType("numeric");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("SsoProvider")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.ConsultantAvailabilitySlot", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.CustomerChoice", "BookedByCustomerChoice")
                        .WithOne("Slot")
                        .HasForeignKey("SapBasisPulse.Api.Entities.ConsultantAvailabilitySlot", "BookedByCustomerChoiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SapBasisPulse.Api.Entities.User", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.User", null)
                        .WithMany("ConsultantSlots")
                        .HasForeignKey("UserId");

                    b.Navigation("BookedByCustomerChoice");

                    b.Navigation("Consultant");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.ConsultantSkill", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.User", "Consultant")
                        .WithMany("ConsultantSkills")
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.SupportCategory", "SupportCategory")
                        .WithMany()
                        .HasForeignKey("SupportCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SapBasisPulse.Api.Entities.SupportSubOption", "SupportSubOption")
                        .WithMany()
                        .HasForeignKey("SupportSubOptionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("SapBasisPulse.Api.Entities.SupportType", "SupportType")
                        .WithMany()
                        .HasForeignKey("SupportTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("SupportCategory");

                    b.Navigation("SupportSubOption");

                    b.Navigation("SupportType");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.Conversation", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.User", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SapBasisPulse.Api.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("Customer");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.CustomerChoice", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.User", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SapBasisPulse.Api.Entities.SupportCategory", "SupportCategory")
                        .WithMany()
                        .HasForeignKey("SupportCategoryId");

                    b.HasOne("SapBasisPulse.Api.Entities.SupportSubOption", "SupportSubOption")
                        .WithMany()
                        .HasForeignKey("SupportSubOptionId");

                    b.HasOne("SapBasisPulse.Api.Entities.SupportType", "SupportType")
                        .WithMany()
                        .HasForeignKey("SupportTypeId");

                    b.HasOne("SapBasisPulse.Api.Entities.User", "User")
                        .WithMany("CustomerChoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Consultant");

                    b.Navigation("SupportCategory");

                    b.Navigation("SupportSubOption");

                    b.Navigation("SupportType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.LoginActivity", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.Message", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.Conversation", "Conversation")
                        .WithMany("Messages")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Conversation");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.MessageAttachment", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.User", "UploadedBy")
                        .WithMany()
                        .HasForeignKey("UploadedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("UploadedBy");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.Order", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.User", "Consultant")
                        .WithMany()
                        .HasForeignKey("ConsultantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SapBasisPulse.Api.Entities.User", "CreatedByUser")
                        .WithMany("Orders")
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.CustomerChoice", "CustomerChoice")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerChoiceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.StatusMaster", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.SupportCategory", "SupportCategory")
                        .WithMany()
                        .HasForeignKey("SupportCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.SupportSubOption", "SupportSubOption")
                        .WithMany()
                        .HasForeignKey("SupportSubOptionId");

                    b.HasOne("SapBasisPulse.Api.Entities.SupportType", "SupportType")
                        .WithMany()
                        .HasForeignKey("SupportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.ConsultantAvailabilitySlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Consultant");

                    b.Navigation("CreatedByUser");

                    b.Navigation("CustomerChoice");

                    b.Navigation("Status");

                    b.Navigation("SupportCategory");

                    b.Navigation("SupportSubOption");

                    b.Navigation("SupportType");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.OrderTimeSlot", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.Order", "Order")
                        .WithMany("OrderTimeSlots")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.ConsultantAvailabilitySlot", "TimeSlot")
                        .WithMany()
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.RefreshToken", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.StatusChangeLog", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.User", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.StatusMaster", "FromStatus")
                        .WithMany()
                        .HasForeignKey("FromStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.Order", "Order")
                        .WithMany("StatusChangeLogs")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.StatusMaster", "ToStatus")
                        .WithMany("StatusChangeLogs")
                        .HasForeignKey("ToStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("FromStatus");

                    b.Navigation("Order");

                    b.Navigation("ToStatus");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.SupportCategory", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.SupportType", "SupportType")
                        .WithMany("Categories")
                        .HasForeignKey("SupportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportType");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.SupportSubOption", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.SupportType", "SupportType")
                        .WithMany("SubOptions")
                        .HasForeignKey("SupportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SupportType");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.TicketRating", b =>
                {
                    b.HasOne("SapBasisPulse.Api.Entities.Order", "Order")
                        .WithMany("TicketRatings")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.User", "RatedByUser")
                        .WithMany()
                        .HasForeignKey("RatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SapBasisPulse.Api.Entities.User", "RatedUser")
                        .WithMany()
                        .HasForeignKey("RatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("RatedByUser");

                    b.Navigation("RatedUser");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.Conversation", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.CustomerChoice", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Slot")
                        .IsRequired();
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.Message", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.Order", b =>
                {
                    b.Navigation("OrderTimeSlots");

                    b.Navigation("StatusChangeLogs");

                    b.Navigation("TicketRatings");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.StatusMaster", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("StatusChangeLogs");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.SupportType", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("SubOptions");
                });

            modelBuilder.Entity("SapBasisPulse.Api.Entities.User", b =>
                {
                    b.Navigation("ConsultantSkills");

                    b.Navigation("ConsultantSlots");

                    b.Navigation("CustomerChoices");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
